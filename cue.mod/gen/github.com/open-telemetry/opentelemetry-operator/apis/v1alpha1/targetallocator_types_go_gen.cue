// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/open-telemetry/opentelemetry-operator/apis/v1alpha1

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"github.com/open-telemetry/opentelemetry-operator/apis/v1beta1"
)

// TargetAllocator is the Schema for the targetallocators API.
#TargetAllocator: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta     @go(ObjectMeta)
	spec?:     #TargetAllocatorSpec   @go(Spec)
	status?:   #TargetAllocatorStatus @go(Status)
}

// TargetAllocatorList contains a list of TargetAllocator.
#TargetAllocatorList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...v1beta1.#OpenTelemetryCollector] @go(Items,[]v1beta1.OpenTelemetryCollector)
}

// TargetAllocatorStatus defines the observed state of Target Allocator.
#TargetAllocatorStatus: {
	// Version of the managed Target Allocator (operand)
	// +optional
	version?: string @go(Version)

	// Image indicates the container image to use for the Target Allocator.
	// +optional
	image?: string @go(Image)
}

// TargetAllocatorSpec defines the desired state of TargetAllocator.
#TargetAllocatorSpec: {
	v1beta1.#OpenTelemetryCommonFields

	// AllocationStrategy determines which strategy the target allocator should use for allocation.
	// The current options are least-weighted, consistent-hashing and per-node. The default is
	// consistent-hashing.
	// WARNING: The per-node strategy currently ignores targets without a Node, like control plane components.
	// +optional
	// +kubebuilder:default:=consistent-hashing
	allocationStrategy?: v1beta1.#TargetAllocatorAllocationStrategy @go(AllocationStrategy)

	// FilterStrategy determines how to filter targets before allocating them among the collectors.
	// The only current option is relabel-config (drops targets based on prom relabel_config).
	// The default is relabel-config.
	// +optional
	// +kubebuilder:default:=relabel-config
	filterStrategy?: v1beta1.#TargetAllocatorFilterStrategy @go(FilterStrategy)

	// GlobalConfig configures the global configuration for Prometheus
	// For more info, see https://prometheus.io/docs/prometheus/latest/configuration/configuration/#configuration-file.
	global?: v1beta1.#AnyConfig @go(GlobalConfig)

	// ScrapeConfigs define static Prometheus scrape configurations for the target allocator.
	// To use dynamic configurations from ServiceMonitors and PodMonitors, see the PrometheusCR section.
	// For the exact format, see https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config.
	// +optional
	// +listType=atomic
	// +kubebuilder:pruning:PreserveUnknownFields
	scrapeConfigs?: [...v1beta1.#AnyConfig] @go(ScrapeConfigs,[]v1beta1.AnyConfig)

	// PrometheusCR defines the configuration for the retrieval of PrometheusOperator CRDs ( servicemonitor.monitoring.coreos.com/v1 and podmonitor.monitoring.coreos.com/v1 ).
	// +optional
	prometheusCR?: v1beta1.#TargetAllocatorPrometheusCR @go(PrometheusCR)

	// ObservabilitySpec defines how telemetry data gets handled.
	//
	// +optional
	// +kubebuilder:validation:Optional
	// +operator-sdk:csv:customresourcedefinitions:type=spec,displayName="Observability"
	observability?: v1beta1.#ObservabilitySpec @go(Observability)
}
