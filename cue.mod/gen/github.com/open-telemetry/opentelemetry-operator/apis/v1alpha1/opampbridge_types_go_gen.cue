// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/open-telemetry/opentelemetry-operator/apis/v1alpha1

package v1alpha1

import (
	"k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// OpAMPBridgeSpec defines the desired state of OpAMPBridge.
#OpAMPBridgeSpec: {
	// OpAMP backend Server endpoint
	// +required
	endpoint: string @go(Endpoint)

	// Headers is an optional map of headers to use when connecting to the OpAMP Server,
	// typically used to set access tokens or other authorization headers.
	// +optional
	headers?: {[string]: string} @go(Headers,map[string]string)

	// Capabilities supported by the OpAMP Bridge
	// +required
	capabilities: {[string]: bool} @go(Capabilities,map[OpAMPBridgeCapability]bool)

	// ComponentsAllowed is a list of allowed OpenTelemetry components for each pipeline type (receiver, processor, etc.)
	// +optional
	componentsAllowed?: {[string]: [...string]} @go(ComponentsAllowed,map[string][]string)

	// Resources to set on the OpAMPBridge pods.
	// +optional
	resources?: v1.#ResourceRequirements @go(Resources)

	// NodeSelector to schedule OpAMPBridge pods.
	// +optional
	nodeSelector?: {[string]: string} @go(NodeSelector,map[string]string)

	// Replicas is the number of pod instances for the OpAMPBridge.
	// +optional
	// +kubebuilder:validation:Maximum=1
	replicas?: null | int32 @go(Replicas,*int32)

	// SecurityContext will be set as the container security context.
	// +optional
	securityContext?: null | v1.#SecurityContext @go(SecurityContext,*v1.SecurityContext)

	// PodSecurityContext will be set as the pod security context.
	// +optional
	podSecurityContext?: null | v1.#PodSecurityContext @go(PodSecurityContext,*v1.PodSecurityContext)

	// PodAnnotations is the set of annotations that will be attached to
	// OpAMPBridge pods.
	// +optional
	podAnnotations?: {[string]: string} @go(PodAnnotations,map[string]string)

	// ServiceAccount indicates the name of an existing service account to use with this instance. When set,
	// the operator will not automatically create a ServiceAccount for the OpAMPBridge.
	// +optional
	serviceAccount?: string @go(ServiceAccount)

	// Image indicates the container image to use for the OpAMPBridge.
	// +optional
	image?: string @go(Image)

	// UpgradeStrategy represents how the operator will handle upgrades to the CR when a newer version of the operator is deployed
	// +optional
	upgradeStrategy?: #UpgradeStrategy @go(UpgradeStrategy)

	// ImagePullPolicy indicates the pull policy to be used for retrieving the container image (Always, Never, IfNotPresent)
	// +optional
	imagePullPolicy?: v1.#PullPolicy @go(ImagePullPolicy)

	// VolumeMounts represents the mount points to use in the underlying OpAMPBridge deployment(s)
	// +optional
	// +listType=atomic
	volumeMounts?: [...v1.#VolumeMount] @go(VolumeMounts,[]v1.VolumeMount)

	// Ports allows a set of ports to be exposed by the underlying v1.Service.
	// +optional
	// +listType=atomic
	ports?: [...v1.#ServicePort] @go(Ports,[]v1.ServicePort)

	// ENV vars to set on the OpAMPBridge Pods.
	// +optional
	env?: [...v1.#EnvVar] @go(Env,[]v1.EnvVar)

	// List of sources to populate environment variables on the OpAMPBridge Pods.
	// +optional
	envFrom?: [...v1.#EnvFromSource] @go(EnvFrom,[]v1.EnvFromSource)

	// Toleration to schedule OpAMPBridge pods.
	// +optional
	tolerations?: [...v1.#Toleration] @go(Tolerations,[]v1.Toleration)

	// Volumes represents which volumes to use in the underlying OpAMPBridge deployment(s).
	// +optional
	// +listType=atomic
	volumes?: [...v1.#Volume] @go(Volumes,[]v1.Volume)

	// HostNetwork indicates if the pod should run in the host networking namespace.
	// +optional
	hostNetwork?: bool @go(HostNetwork)

	// If specified, indicates the pod's priority.
	// If not specified, the pod priority will be default or zero if there is no
	// default.
	// +optional
	priorityClassName?: string @go(PriorityClassName)

	// If specified, indicates the pod's scheduling constraints
	// +optional
	affinity?: null | v1.#Affinity @go(Affinity,*v1.Affinity)

	// TopologySpreadConstraints embedded kubernetes pod configuration option,
	// controls how pods are spread across your cluster among failure-domains
	// such as regions, zones, nodes, and other user-defined topology domains
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
	// +optional
	topologySpreadConstraints?: [...v1.#TopologySpreadConstraint] @go(TopologySpreadConstraints,[]v1.TopologySpreadConstraint)

	// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
	podDnsConfig?: v1.#PodDNSConfig @go(PodDNSConfig)

	// IPFamily represents the IP Family (IPv4 or IPv6). This type is used
	// to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
	// +optional
	ipFamilies?: [...v1.#IPFamily] @go(IpFamilies,[]v1.IPFamily)

	// IPFamilyPolicy represents the dual-stack-ness requested or required by a Service
	ipFamilyPolicy?: null | v1.#IPFamilyPolicy @go(IpFamilyPolicy,*v1.IPFamilyPolicy)
}

// OpAMPBridgeStatus defines the observed state of OpAMPBridge.
#OpAMPBridgeStatus: {
	// Version of the managed OpAMP Bridge (operand)
	// +optional
	version?: string @go(Version)
}

// OpAMPBridge is the Schema for the opampbridges API.
#OpAMPBridge: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #OpAMPBridgeSpec   @go(Spec)
	status?:   #OpAMPBridgeStatus @go(Status)
}

// OpAMPBridgeList contains a list of OpAMPBridge.
#OpAMPBridgeList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#OpAMPBridge] @go(Items,[]OpAMPBridge)
}
