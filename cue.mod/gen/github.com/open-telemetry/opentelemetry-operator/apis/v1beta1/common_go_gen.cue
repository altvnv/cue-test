// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/open-telemetry/opentelemetry-operator/apis/v1beta1

package v1beta1

import (
	autoscalingv2 "k8s.io/api/autoscaling/v2"
	"k8s.io/apimachinery/pkg/util/intstr"
	"k8s.io/api/core/v1"
	appsv1 "k8s.io/api/apps/v1"
)

// ManagementStateType defines the type for CR management states.
//
// +kubebuilder:validation:Enum=managed;unmanaged
#ManagementStateType: string // #enumManagementStateType

#enumManagementStateType:
	#ManagementStateManaged |
	#ManagementStateUnmanaged

// ManagementStateManaged when the OpenTelemetryCollector custom resource should be
// reconciled by the operator.
#ManagementStateManaged: #ManagementStateType & "managed"

// ManagementStateUnmanaged when the OpenTelemetryCollector custom resource should not be
// reconciled by the operator.
#ManagementStateUnmanaged: #ManagementStateType & "unmanaged"

// MetricSpec defines a subset of metrics to be defined for the HPA's metric array
// more metric type can be supported as needed.
// See https://pkg.go.dev/k8s.io/api/autoscaling/v2#MetricSpec for reference.
#MetricSpec: {
	type:  autoscalingv2.#MetricSourceType        @go(Type)
	pods?: null | autoscalingv2.#PodsMetricSource @go(Pods,*autoscalingv2.PodsMetricSource)
}

// AutoscalerSpec defines the OpenTelemetryCollector's pod autoscaling specification.
#AutoscalerSpec: {
	// MinReplicas sets a lower bound to the autoscaling feature.  Set this if your are using autoscaling. It must be at least 1
	// +optional
	minReplicas?: null | int32 @go(MinReplicas,*int32)

	// MaxReplicas sets an upper bound to the autoscaling feature. If MaxReplicas is set autoscaling is enabled.
	// +optional
	maxReplicas?: null | int32 @go(MaxReplicas,*int32)

	// +optional
	behavior?: null | autoscalingv2.#HorizontalPodAutoscalerBehavior @go(Behavior,*autoscalingv2.HorizontalPodAutoscalerBehavior)

	// Metrics is meant to provide a customizable way to configure HPA metrics.
	// currently the only supported custom metrics is type=Pod.
	// Use TargetCPUUtilization or TargetMemoryUtilization instead if scaling on these common resource metrics.
	// +optional
	metrics?: [...#MetricSpec] @go(Metrics,[]MetricSpec)

	// TargetCPUUtilization sets the target average CPU used across all replicas.
	// If average CPU exceeds this value, the HPA will scale up. Defaults to 90 percent.
	// +optional
	targetCPUUtilization?: null | int32 @go(TargetCPUUtilization,*int32)

	// +optional
	// TargetMemoryUtilization sets the target average memory utilization across all replicas
	targetMemoryUtilization?: null | int32 @go(TargetMemoryUtilization,*int32)
}

// PodDisruptionBudgetSpec defines the OpenTelemetryCollector's pod disruption budget specification.
#PodDisruptionBudgetSpec: {
	// An eviction is allowed if at least "minAvailable" pods selected by
	// "selector" will still be available after the eviction, i.e. even in the
	// absence of the evicted pod.  So for example you can prevent all voluntary
	// evictions by specifying "100%".
	// +optional
	minAvailable?: null | intstr.#IntOrString @go(MinAvailable,*intstr.IntOrString)

	// An eviction is allowed if at most "maxUnavailable" pods selected by
	// "selector" are unavailable after the eviction, i.e. even in absence of
	// the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	// +optional
	maxUnavailable?: null | intstr.#IntOrString @go(MaxUnavailable,*intstr.IntOrString)
}

// PortsSpec defines the OpenTelemetryCollector's container/service ports additional specifications.
#PortsSpec: {
	// Allows defining which port to bind to the host in the Container.
	// +optional
	hostPort?: int32 @go(HostPort)

	v1.#ServicePort
}

#OpenTelemetryCommonFields: {
	// ManagementState defines if the CR should be managed by the operator or not.
	// Default is managed.
	//
	// +required
	// +kubebuilder:validation:Required
	// +kubebuilder:default:=managed
	managementState?: #ManagementStateType @go(ManagementState)

	// Resources to set on generated pods.
	// +optional
	resources?: v1.#ResourceRequirements @go(Resources)

	// NodeSelector to schedule generated pods.
	// This only works with the following OpenTelemetryCollector mode's: daemonset, statefulset, and deployment.
	// +optional
	nodeSelector?: {[string]: string} @go(NodeSelector,map[string]string)

	// Args is the set of arguments to pass to the main container's binary.
	// +optional
	args?: {[string]: string} @go(Args,map[string]string)

	// Replicas is the number of pod instances for the underlying replicaset. Set this if you are not using autoscaling.
	// +optional
	replicas?: null | int32 @go(Replicas,*int32)

	// PodDisruptionBudget specifies the pod disruption budget configuration to use
	// for the generated workload. By default, a PDB with a MaxUnavailable of one is set.
	//
	// +optional
	podDisruptionBudget?: null | #PodDisruptionBudgetSpec @go(PodDisruptionBudget,*PodDisruptionBudgetSpec)

	// SecurityContext configures the container security context for
	// the generated main container.
	//
	// In deployment, daemonset, or statefulset mode, this controls
	// the security context settings for the primary application
	// container.
	//
	// In sidecar mode, this controls the security context for the
	// injected sidecar container.
	//
	// +optional
	securityContext?: null | v1.#SecurityContext @go(SecurityContext,*v1.SecurityContext)

	// PodSecurityContext configures the pod security context for the
	// generated pod, when running as a deployment, daemonset,
	// or statefulset.
	//
	// In sidecar mode, the opentelemetry-operator will ignore this setting.
	//
	// +optional
	podSecurityContext?: null | v1.#PodSecurityContext @go(PodSecurityContext,*v1.PodSecurityContext)

	// PodAnnotations is the set of annotations that will be attached to
	// the generated pods.
	// +optional
	podAnnotations?: {[string]: string} @go(PodAnnotations,map[string]string)

	// ServiceAccount indicates the name of an existing service account to use with this instance. When set,
	// the operator will not automatically create a ServiceAccount.
	// +optional
	serviceAccount?: string @go(ServiceAccount)

	// Image indicates the container image to use for the generated pods.
	// +optional
	image?: string @go(Image)

	// ImagePullPolicy indicates the pull policy to be used for retrieving the container image.
	// +optional
	imagePullPolicy?: v1.#PullPolicy @go(ImagePullPolicy)

	// VolumeMounts represents the mount points to use in the underlying deployment(s).
	// +optional
	// +listType=atomic
	volumeMounts?: [...v1.#VolumeMount] @go(VolumeMounts,[]v1.VolumeMount)

	// Ports allows a set of ports to be exposed by the underlying v1.Service & v1.ContainerPort. By default, the operator
	// will attempt to infer the required ports by parsing the .Spec.Config property but this property can be
	// used to open additional ports that can't be inferred by the operator, like for custom receivers.
	// +optional
	// +listType=atomic
	ports?: [...#PortsSpec] @go(Ports,[]PortsSpec)

	// Environment variables to set on the generated pods.
	// +optional
	env?: [...v1.#EnvVar] @go(Env,[]v1.EnvVar)

	// List of sources to populate environment variables on the generated pods.
	// +optional
	envFrom?: [...v1.#EnvFromSource] @go(EnvFrom,[]v1.EnvFromSource)

	// Toleration to schedule the generated pods.
	// This only works with the following OpenTelemetryCollector mode's: daemonset, statefulset, and deployment.
	// +optional
	tolerations?: [...v1.#Toleration] @go(Tolerations,[]v1.Toleration)

	// Volumes represents which volumes to use in the underlying deployment(s).
	// +optional
	// +listType=atomic
	volumes?: [...v1.#Volume] @go(Volumes,[]v1.Volume)

	// If specified, indicates the pod's scheduling constraints
	// +optional
	affinity?: null | v1.#Affinity @go(Affinity,*v1.Affinity)

	// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
	// +optional
	lifecycle?: null | v1.#Lifecycle @go(Lifecycle,*v1.Lifecycle)

	// Duration in seconds the pod needs to terminate gracefully upon probe failure.
	// +optional
	terminationGracePeriodSeconds?: null | int64 @go(TerminationGracePeriodSeconds,*int64)

	// TopologySpreadConstraints embedded kubernetes pod configuration option,
	// controls how pods are spread across your cluster among failure-domains
	// such as regions, zones, nodes, and other user-defined topology domains
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
	// This only works with the following OpenTelemetryCollector mode's: statefulset, and deployment.
	// +optional
	topologySpreadConstraints?: [...v1.#TopologySpreadConstraint] @go(TopologySpreadConstraints,[]v1.TopologySpreadConstraint)

	// HostNetwork indicates if the pod should run in the host networking namespace.
	// +optional
	hostNetwork?: bool @go(HostNetwork)

	// ShareProcessNamespace indicates if the pod's containers should share process namespace.
	// +optional
	shareProcessNamespace?: bool @go(ShareProcessNamespace)

	// If specified, indicates the pod's priority.
	// If not specified, the pod priority will be default or zero if there is no
	// default.
	// +optional
	priorityClassName?: string @go(PriorityClassName)

	// InitContainers allows injecting initContainers to the generated pod definition.
	// These init containers can be used to fetch secrets for injection into the
	// configuration from external sources, run added checks, etc. Any errors during the execution of
	// an initContainer will lead to a restart of the Pod. More info:
	// https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	// +optional
	initContainers?: [...v1.#Container] @go(InitContainers,[]v1.Container)

	// AdditionalContainers allows injecting additional containers into the generated pod definition.
	// These sidecar containers can be used for authentication proxies, log shipping sidecars, agents for shipping
	// metrics to their cloud, or in general sidecars that do not support automatic injection.
	// This only works with the following OpenTelemetryCollector mode's: daemonset, statefulset, and deployment.
	//
	// Container names managed by the operator:
	// * `otc-container`
	//
	// Overriding containers managed by the operator is outside the scope of what the maintainers will support and by
	// doing so, you wil accept the risk of it breaking things.
	//
	// +optional
	additionalContainers?: [...v1.#Container] @go(AdditionalContainers,[]v1.Container)

	// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
	podDnsConfig?: v1.#PodDNSConfig @go(PodDNSConfig)

	// IPFamily represents the IP Family (IPv4 or IPv6). This type is used
	// to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
	// +optional
	ipFamilies?: [...v1.#IPFamily] @go(IpFamilies,[]v1.IPFamily)

	// IPFamilyPolicy represents the dual-stack-ness requested or required by a Service
	// +kubebuilder:default:=SingleStack
	// +optional
	ipFamilyPolicy?: null | v1.#IPFamilyPolicy @go(IpFamilyPolicy,*v1.IPFamilyPolicy)
}

#StatefulSetCommonFields: {
	// VolumeClaimTemplates will provide stable storage using PersistentVolumes.
	// This only works with the following OpenTelemetryCollector mode's: statefulset.
	// +optional
	// +listType=atomic
	volumeClaimTemplates?: [...v1.#PersistentVolumeClaim] @go(VolumeClaimTemplates,[]v1.PersistentVolumeClaim)

	// PersistentVolumeClaimRetentionPolicy describes the lifecycle of persistent volume claims
	// created from volumeClaimTemplates.
	// This only works with the following OpenTelemetryCollector modes: statefulset.
	// +optional
	persistentVolumeClaimRetentionPolicy?: null | appsv1.#StatefulSetPersistentVolumeClaimRetentionPolicy @go(PersistentVolumeClaimRetentionPolicy,*appsv1.StatefulSetPersistentVolumeClaimRetentionPolicy)
}
