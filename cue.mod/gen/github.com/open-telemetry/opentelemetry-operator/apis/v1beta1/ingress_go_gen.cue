// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/open-telemetry/opentelemetry-operator/apis/v1beta1

package v1beta1

import networkingv1 "k8s.io/api/networking/v1"

#IngressType: string // #enumIngressType

#enumIngressType:
	#IngressTypeIngress |
	#IngressTypeRoute

// IngressTypeIngress specifies that an ingress should be created.
#IngressTypeIngress: #IngressType & "ingress"

// IngressTypeRoute IngressTypeOpenshiftRoute specifies that an route should be created.
#IngressTypeRoute: #IngressType & "route"

#TLSRouteTerminationType: string // #enumTLSRouteTerminationType

#enumTLSRouteTerminationType:
	#TLSRouteTerminationTypeInsecure |
	#TLSRouteTerminationTypeEdge |
	#TLSRouteTerminationTypePassthrough |
	#TLSRouteTerminationTypeReencrypt

// TLSRouteTerminationTypeInsecure indicates that insecure connections are allowed.
#TLSRouteTerminationTypeInsecure: #TLSRouteTerminationType & "insecure"

// TLSRouteTerminationTypeEdge indicates that encryption should be terminated
// at the edge router.
#TLSRouteTerminationTypeEdge: #TLSRouteTerminationType & "edge"

// TLSTerminationPassthrough indicates that the destination service is
// responsible for decrypting traffic.
#TLSRouteTerminationTypePassthrough: #TLSRouteTerminationType & "passthrough"

// TLSTerminationReencrypt indicates that traffic will be decrypted on the edge
// and re-encrypt using a new certificate.
#TLSRouteTerminationTypeReencrypt: #TLSRouteTerminationType & "reencrypt"

// IngressRuleType defines how the collector receivers will be exposed in the Ingress.
//
// +kubebuilder:validation:Enum=path;subdomain
#IngressRuleType: string // #enumIngressRuleType

#enumIngressRuleType:
	#IngressRuleTypePath |
	#IngressRuleTypeSubdomain

// IngressRuleTypePath configures Ingress to use single host with multiple paths.
// This configuration might require additional ingress setting to rewrite paths.
#IngressRuleTypePath: #IngressRuleType & "path"

// IngressRuleTypeSubdomain configures Ingress to use multiple hosts - one for each exposed
// receiver port. The port name is used as a subdomain for the host defined in the Ingress e.g. otlp-http.example.com.
#IngressRuleTypeSubdomain: #IngressRuleType & "subdomain"

// Ingress is used to specify how OpenTelemetry Collector is exposed. This
// functionality is only available if one of the valid modes is set.
// Valid modes are: deployment, daemonset and statefulset.
// NOTE: If this feature is activated, all specified receivers are exposed.
// Currently, this has a few limitations. Depending on the ingress controller
// there are problems with TLS and gRPC.
// SEE: https://github.com/open-telemetry/opentelemetry-operator/issues/1306.
// NOTE: As a workaround, port name and appProtocol could be specified directly
// in the CR.
// SEE: OpenTelemetryCollector.spec.ports[index].
#Ingress: {
	// Type default value is: ""
	// Supported types are: ingress, route
	type?: #IngressType @go(Type)

	// RuleType defines how Ingress exposes collector receivers.
	// IngressRuleTypePath ("path") exposes each receiver port on a unique path on single domain defined in Hostname.
	// IngressRuleTypeSubdomain ("subdomain") exposes each receiver port on a unique subdomain of Hostname.
	// Default is IngressRuleTypePath ("path").
	ruleType?: #IngressRuleType @go(RuleType)

	// Hostname by which the ingress proxy can be reached.
	// +optional
	hostname?: string @go(Hostname)

	// Annotations to add to ingress.
	// e.g. 'cert-manager.io/cluster-issuer: "letsencrypt"'
	// +optional
	annotations?: {[string]: string} @go(Annotations,map[string]string)

	// TLS configuration.
	// +optional
	tls?: [...networkingv1.#IngressTLS] @go(TLS,[]networkingv1.IngressTLS)

	// IngressClassName is the name of an IngressClass cluster resource. Ingress
	// controller implementations use this field to know whether they should be
	// serving this Ingress resource.
	// +optional
	ingressClassName?: null | string @go(IngressClassName,*string)

	// Route is an OpenShift specific section that is only considered when
	// type "route" is used.
	// +optional
	route?: #OpenShiftRoute @go(Route)
}

// OpenShiftRoute defines openshift route specific settings.
#OpenShiftRoute: {
	// Termination indicates termination type. By default "edge" is used.
	termination?: #TLSRouteTerminationType @go(Termination)
}
