// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/open-telemetry/opentelemetry-operator/apis/v1beta1

package v1beta1

#ComponentKind: int // #enumComponentKind

#enumComponentKind:
	#KindReceiver |
	#KindExporter |
	#KindProcessor |
	#KindExtension

#values_ComponentKind: {
	KindReceiver:  #KindReceiver
	KindExporter:  #KindExporter
	KindProcessor: #KindProcessor
	KindExtension: #KindExtension
}

#KindReceiver:  #ComponentKind & 0
#KindExporter:  #ComponentKind & 1
#KindProcessor: #ComponentKind & 2
#KindExtension: #ComponentKind & 3

// AnyConfig represent parts of the config.
#AnyConfig: _

// Pipeline is a struct of component type to a list of component IDs.
#Pipeline: {
	exporters: [...string] @go(Exporters,[]string)
	processors?: [...string] @go(Processors,[]string)
	receivers: [...string] @go(Receivers,[]string)
}

// Config encapsulates collector config.
#Config: {
	// +kubebuilder:pruning:PreserveUnknownFields
	receivers: #AnyConfig @go(Receivers)

	// +kubebuilder:pruning:PreserveUnknownFields
	exporters: #AnyConfig @go(Exporters)

	// +kubebuilder:pruning:PreserveUnknownFields
	processors?: null | #AnyConfig @go(Processors,*AnyConfig)

	// +kubebuilder:pruning:PreserveUnknownFields
	connectors?: null | #AnyConfig @go(Connectors,*AnyConfig)

	// +kubebuilder:pruning:PreserveUnknownFields
	extensions?: null | #AnyConfig @go(Extensions,*AnyConfig)
	service:     #Service          @go(Service)
}

#Service: {
	extensions?: [...string] @go(Extensions,[]string)

	// +kubebuilder:pruning:PreserveUnknownFields
	telemetry?: null | #AnyConfig @go(Telemetry,*AnyConfig)

	// +kubebuilder:pruning:PreserveUnknownFields
	pipelines: {[string]: null | #Pipeline} @go(Pipelines,map[string]*Pipeline)
}

_#defaultServicePort: int32 & 8888
_#defaultServiceHost: "0.0.0.0"

// MetricsConfig comes from the collector.
#MetricsConfig: {
	// Level is the level of telemetry metrics, the possible values are:
	//  - "none" indicates that no telemetry data should be collected;
	//  - "basic" is the recommended and covers the basics of the service telemetry.
	//  - "normal" adds some other indicators on top of basic.
	//  - "detailed" adds dimensions and views to the previous levels.
	level?: string @go(Level)

	// Address is the [address]:port that metrics exposition should be bound to.
	address?: string @go(Address)
}

// Telemetry is an intermediary type that allows for easy access to the collector's telemetry settings.
#Telemetry: {
	metrics?: #MetricsConfig @go(Metrics)

	// Resource specifies user-defined attributes to include with all emitted telemetry.
	// Note that some attributes are added automatically (e.g. service.version) even
	// if they are not specified here. In order to suppress such attributes the
	// attribute must be specified in this map with null YAML value (nil string pointer).
	resource?: {[string]: null | string} @go(Resource,map[string]*string)
}
